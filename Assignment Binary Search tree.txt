Assignment Binary Search tree

Answer1
package binarySearchTreeAssignment;

/*Q1. Write an iterative program to search for an element in BST. Also construct a sample BST and
try to search for elements in the same.
The for BST is : 15, 10, 20, 8, 12, 16, 25
Search for 25 in it.*/
public class Q1 {
	public static void main(String[] args) {
		Node root = new Node(15);
		root.left = new Node(10);
		root.right = new Node(20);
		root.left.left = new Node(8);
		root.left.right = new Node(12);
		root.right.left = new Node(16);
		root.right.right = new Node(25);

		int key = 25;
		System.out.println("Found key : " + searchBST(root, key));
	}

	private static boolean searchBST(Node root, int key) {
		// if tree empty return
		if (root == null)
			return false;
		// if key found return true
		if (root.data == key)
			return true;

		// if key value is less than current node data go left for searching
		if (key < root.data)
			return searchBST(root.left, key);
		else
			return searchBST(root.right, key);
	}
}

Answer2
package binarySearchTreeAssignment;

/*Q2. Given a BST and a positive number k, find the k'th largest node in the BST.
For example, consider the following binary search tree. If k = 2, the k'th largest node is 20.*/
public class Q2 {
	public static void main(String[] args) {
		Node root = new Node(15);
		root.left = new Node(10);
		root.right = new Node(20);
		root.left.left = new Node(8);
		root.left.right = new Node(12);
		root.right.left = new Node(16);
		root.right.right = new Node(25);

		int k = 2;
		Node result = findKthLargest(root, k);
		System.out.println("Kth largest : " + result.data);
	}

	static int count = 0;

	private static Node findKthLargest(Node root, int k) {
		if (root == null)
			return null;

		Node right = findKthLargest(root.right, k);
		if (right != null)
			return right;
		count++;
		if (count == k)
			return root;

		return findKthLargest(root.left, k);
	}
}

Answer3
package binarySearchTreeAssignment;

/*Q3. Given a binary search tree, find a pair with a given sum present in it.
For example, consider the following BST. If the given sum is 14, the pair is (8, 6).*/

public class Q3 {

	public static void main(String[] args) {
		Node root = new Node(15);
		root.left = new Node(10);
		root.right = new Node(20);

		root.left.left = new Node(8);
		root.left.right = new Node(12);

		root.right.left = new Node(20);
		root.right.right = new Node(30);

		root.left.left.left = new Node(6);
		root.left.left.right = new Node(9);

		root.right.left.left = new Node(18);
		root.right.left.right = new Node(22);

		int targetSum = 14;
		findPairWithSum(root, targetSum);
	}

	private static void findPairWithSum(Node root, int targetSum) {
		if (root == null)
			return;

		// Perform an in-order traversal and store the nodes in an array
		Node[] nodes = new Node[9];
		storeInOrder(root, nodes, 0);

		// Use two-pointer technique to find the pair with the given sum
		int left = 0;
		int right = nodes.length - 1;

		while (left < right) {
			int sum = nodes[left].data + nodes[right].data;

			if (sum == targetSum) {
				System.out.println("Pair found: (" + nodes[left].data + ", " + nodes[right].data + ")");
				return;
			}

			if (sum < targetSum)
				left++;
			else
				right--;
		}

		System.out.println("No pair found with the given sum.");

	}

	private static int storeInOrder(Node root, Node[] nodes, int index) {
		if (root == null)
			return index;

		index = storeInOrder(root.left, nodes, index);
		nodes[index++] = root;
		index = storeInOrder(root.right, nodes, index);

		return index;

	}
}

Answer4
package binarySearchTreeAssignment;

/*Q4. Given a BST, find the inorder predecessor of a given key in it. If the key does not lie 
 * in the BST, return the previous greater node (if any) present in the BST.
The predecessor of node 15 is 12
The predecessor of node 10 is 8
The predecessor of node 20 is 16
The predecessor doesn’t exist for node 8
The predecessor of node 12 is 10
The predecessor of node 16 is 15
The predecessor of node 25 is 20
A node’s inorder predecessor is a node with maximum value in its left subtree, i.e., its left
subtree’s right-most child. If the left subtree of the node doesn’t exist, then the inorder
predecessor is one of its ancestors*/
public class Q4 {
	public static void main(String[] args) {
		Node root = new Node(15);
		root.left = new Node(10);
		root.right = new Node(20);
		root.left.left = new Node(8);
		root.left.right = new Node(12);
		root.right.left = new Node(16);
		root.right.right = new Node(25);

		/*
		 * In the context of a binary search tree (BST), the predecessor of a node is
		 * defined as the node with the largest value that is smaller than the given
		 * node. In other words, it is the node that comes immediately before the given
		 * node in an inorder traversal of the BST.
		 */
		// lets find Predecesssor for node = 16
		Node keyNode = root.right.left;
		Node predecessor = findInorderPredecessor(root, keyNode);

		if (predecessor != null) {
			System.out.println("The predecessor of node " + keyNode.data + " is: " + predecessor.data);
		} else {
			System.out.println("The predecessor doesn't exist for node " + keyNode.data);
		}
	}

	private static Node findInorderPredecessor(Node root, Node keyNode) {
		if (root == null || keyNode == null)
			return null;

		// Case 1: If the left subtree of the keyNode exists, find the rightmost node in
		// that subtree
		if (keyNode.left != null)
			return findRightmostNode(keyNode.left);

		// Case 2: If the left subtree of the keyNode doesn't exist, find the ancestor node
		// which is the first node with a value less than the keyNode
		Node predecessor = null;
		while (root != null) {
			if (keyNode.data > root.data) {
				predecessor = root;
				root = root.right;
			} else if (keyNode.data < root.data) {
				root = root.left;
			} else {
				break;
			}
		}
		return predecessor;
	}

	public static Node findRightmostNode(Node node) {
		while (node.right != null) {
			node = node.right;
		}
		return node;
	}
}

Answer5
package binarySearchTreeAssignment;

/*Q5. Given a BST and two nodes x and y in it, find the lowest common ancestor (LCA) of x and y.
The solution should return null if either x or y is not the actual node in the tree.*/
public class Q5 {
	public static void main(String[] args) {
		Node root = new Node(15);
		root.left = new Node(10);
		root.right = new Node(20);

		root.left.left = new Node(8);
		root.left.right = new Node(12);

		root.right.left = new Node(20);
		root.right.right = new Node(30);

		root.left.left.left = new Node(6);
		root.left.left.right = new Node(9);

		root.right.left.left = new Node(18);
		root.right.left.right = new Node(22);

		Node x = root.left.left; // x=8
		Node y = root.right.left.left; // y=18

		Node lca = findLowestCommonAncestor(root, x, y);
		if (lca != null) {
			System.out.println("Lowest Common Ancestor of " + x.data + " and " + y.data + " is: " + lca.data);
		} else {
			System.out.println("Either " + x.data + " or " + y.data + " is not present in the tree.");
		}
	}

	private static Node findLowestCommonAncestor(Node root, Node x, Node y) {
		if (root == null)
			return null;

		if (root == x || root == y)
			return root;

		Node leftLCA = findLowestCommonAncestor(root.left, x, y);
		Node rightLCA = findLowestCommonAncestor(root.right, x, y);

		if (leftLCA != null && rightLCA != null)
			return root;

		//if left common ancestor is not null we return left LCA otherwise we return right LCA
		return (leftLCA != null) ? leftLCA : rightLCA;
	}
}